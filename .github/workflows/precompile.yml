name: wxwidgets-windows

on:
  push:
    tags:
        - 'v*'

permissions:
  contents: write

jobs:
  windows:
    runs-on: windows-2019
    env:
      ZLIB_VERSION: "1.3.1"
      CMAKE_GENERATOR: "Visual Studio 17 2022"
    strategy:
      fail-fast: false
      matrix:
        include:
          - pair:
              arch: aarch64
              target_arch: arm64
              vcvarsall: amd64_arm64
              cmake_arch: arm64
          - pair:
              arch: x86_64
              target_arch: amd64
              vcvarsall: x64
              cmake_arch: x64
          - pair:
              arch: i686
              target_arch: x86
              vcvarsall: amd64_x86
              cmake_arch: x64
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.pair.vcvarsall }}

      - name: Cache zlib source code
        id: cache-zlib-src
        uses: actions/cache@v4
        with:
          key: zlib-src-${{ env.ZLIB_VERSION }}
          path: |
            ./zlib-${{ env.ZLIB_VERSION}}.tar.gz

      - name: Download latest zlib source code
        if: steps.cache-zlib-src.outputs.cache-hit != 'true'
        run: |
          $TARBALL_NAME="zlib-${{ env.ZLIB_VERSION}}.tar.gz"
          if (!(Test-Path $TARBALL_NAME -PathType Leaf)) {
            Invoke-WebRequest -Uri "https://www.zlib.net/$TARBALL_NAME" -OutFile "$TARBALL_NAME"
          }

      - name: Compile zlib
        run: |
          rm -rf "zlib-${{ env.ZLIB_VERSION}}"
          tar -xzf "zlib-${{ env.ZLIB_VERSION}}.tar.gz"

          cmake -S . -B build -G "${{ env.CMAKE_GENERATOR}}" -A "${{ matrix.pair.cmake_arch }}" -DCMAKE_INSTALL_PREFIX="C:\zlib-${{ env.ZLIB_VERSION}}" -DZLIB_BUILD_EXAMPLES=OFF
          cmake --build build --config Release
          cmake --install build --config Release

          $STATIC_LIB="zlibstatic.lib"
          cd "C:\zlib-${{ env.ZLIB_VERSION}}\lib"
          if (Test-Path $STATIC_LIB -PathType Leaf) {
            Copy-Item -Path $STATIC_LIB -Destination z.lib -Force
          }

      - name: Cache nsis source code
        id: cache-nsis-src
        uses: actions/cache@v4
        with:
          key: nsis-src-${{ env.ZLIB_VERSION }}
          path: |
            ./nsis-${{ env.ZLIB_VERSION}}.tar.bz2

      - name: Download latest nsis source code
        shell: bash
        if: steps.cache-nsis-src.outputs.cache-hit != 'true'
        run: |
          NSIS_VERSION=${GITHUB_REF##*/v}
          TARBALL_NAME="nsis-${NSIS_VERSION}-src.tar.bz2"
          curl -fSL "https://prdownloads.sourceforge.net/nsis/${TARBALL_NAME}?download" -o "$TARBALL_NAME"

      - name: Compile NSIS
        run: |
          $ref = $env:GITHUB_REF
          $NSIS_VERSION=$ref.Replace('refs/tags/v','')
          $TARBALL_NAME="nsis-${NSIS_VERSION}-src.tar.bz2"
          tar -xf "$TARBALL_NAME"

          pip3 install -U scons
          cd "nsis-${NSIS_VERSION}-src"
          scons "ZLIB_W32=C:\zlib-${{ env.ZLIB_VERSION }}" "APPEND_LIBPATH=C:\zlib-${{ env.ZLIB_VERSION }}\lib" SKIPUTILS="NSIS Menu" TARGET_ARCH=${{ matrix.pair.target_arch }} DOCTYPES=web PREFIX=aarch64-windows-msvc dist-zip

      - name: Create tarball
        run: |
          $ref = $env:GITHUB_REF
          $NSIS_VERSION=$ref.Replace('refs/tags/v','')
          
          $ZIPFILE=(Get-ChildItem -Path . -Filter 'nsis*cvs*.zip' -Depth 0 -File).FullName
          Expand-Archive -Path $ZIPFILE
          $UNARCHIVED_DIR=(Get-ChildItem -Path . -Filter 'nsis*cvs' -Depth 0 -Directory).FullName

          Remove-Item -LiteralPath artifacts -Force -Recurse -ErrorAction SilentlyContinue
          New-Item -ItemType Directory -Path artifacts -Force
          tar -czf "./artifacts/nsis-${{ matrix.pair.arch }}-windows-msvc.tar.gz" -C "$UNARCHIVED_DIR" .

      - uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/nsis-*.tar.gz
